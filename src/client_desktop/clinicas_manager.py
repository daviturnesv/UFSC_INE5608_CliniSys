#!/usr/bin/env python3
"""
Interface para gerenciamento de cl√≠nicas
Permite ao administrador criar, editar e remover cl√≠nicas
"""

from __future__ import annotations

import asyncio
import tkinter as tk
from tkinter import ttk, messagebox
from typing import Optional, List, Dict, Any

from src.backend.db.database import AsyncSessionLocal
from src.backend.models.clinica import Clinica
from sqlalchemy import select, update, delete
from sqlalchemy.exc import IntegrityError


class ClinicasApp(tk.Toplevel):
    """Interface para gerenciamento de cl√≠nicas"""
    
    def __init__(self, master: tk.Tk):
        super().__init__(master)
        self.title("CliniSys - Gerenciamento de Cl√≠nicas")
        self.geometry("800x600")
        self.resizable(True, True)
        
        # Centralizar janela
        self.transient(master)
        
        # Vari√°veis de controle
        self.clinicas_data: List[Dict[str, Any]] = []
        self.selected_clinica_id: Optional[int] = None
        self.edit_mode = False
        
        # Vari√°veis dos campos
        self.var_id = tk.StringVar()
        self.var_codigo = tk.StringVar()
        self.var_nome = tk.StringVar()
        
        self._create_widgets()
        self._center_window()
        
        # Carregar dados iniciais
        self.run_async(self._load_clinicas())
    
    def _center_window(self):
        """Centraliza a janela na tela"""
        self.update_idletasks()
        x = (self.winfo_screenwidth() // 2) - (self.winfo_width() // 2)
        y = (self.winfo_screenheight() // 2) - (self.winfo_height() // 2)
        self.geometry(f"+{x}+{y}")
    
    def _create_widgets(self):
        """Cria os widgets da interface"""
        # Frame principal
        main_frame = ttk.Frame(self, padding="10")
        main_frame.pack(fill="both", expand=True)
        
        # T√≠tulo
        title_label = ttk.Label(main_frame, text="Gerenciamento de Cl√≠nicas", 
                               font=("Arial", 16, "bold"))
        title_label.pack(pady=(0, 20))
        
        # Frame de controles superiores
        controls_frame = ttk.Frame(main_frame)
        controls_frame.pack(fill="x", pady=(0, 10))
        
        # Bot√µes de a√ß√£o
        ttk.Button(controls_frame, text="üîÑ Atualizar Lista", 
                  command=self._refresh_list).pack(side="left", padx=(0, 5))
        ttk.Button(controls_frame, text="‚ûï Nova Cl√≠nica", 
                  command=self._new_clinica).pack(side="left", padx=(0, 5))
        
        # Frame principal dividido
        content_frame = ttk.Frame(main_frame)
        content_frame.pack(fill="both", expand=True)
        
        # Frame esquerdo - Lista de cl√≠nicas
        left_frame = ttk.LabelFrame(content_frame, text="Lista de Cl√≠nicas")
        left_frame.pack(side="left", fill="both", expand=True, padx=(0, 10))
        
        # Treeview para lista de cl√≠nicas
        columns = ("id", "codigo", "nome")
        self.tree = ttk.Treeview(left_frame, columns=columns, show="headings", height=15)
        
        # Configurar colunas
        self.tree.heading("id", text="ID")
        self.tree.heading("codigo", text="C√≥digo")
        self.tree.heading("nome", text="Nome")
        
        self.tree.column("id", width=50)
        self.tree.column("codigo", width=100)
        self.tree.column("nome", width=200)
        
        # Scrollbar para treeview
        tree_scrollbar = ttk.Scrollbar(left_frame, orient="vertical", command=self.tree.yview)
        self.tree.configure(yscrollcommand=tree_scrollbar.set)
        
        self.tree.pack(side="left", fill="both", expand=True)
        tree_scrollbar.pack(side="right", fill="y")
        
        # Bind evento de sele√ß√£o
        self.tree.bind("<<TreeviewSelect>>", self._on_select_clinica)
        
        # Frame direito - Detalhes da cl√≠nica
        right_frame = ttk.LabelFrame(content_frame, text="Detalhes da Cl√≠nica")
        right_frame.pack(side="right", fill="y", padx=(10, 0))
        
        # Campos de detalhes
        details_frame = ttk.Frame(right_frame, padding="10")
        details_frame.pack(fill="both", expand=True)
        
        row = 0
        
        # ID (readonly)
        ttk.Label(details_frame, text="ID:").grid(row=row, column=0, sticky="w", pady=2)
        self.entry_id = ttk.Entry(details_frame, textvariable=self.var_id, 
                                 state="readonly", width=30)
        self.entry_id.grid(row=row, column=1, sticky="w", padx=5, pady=2)
        row += 1
        
        # C√≥digo
        ttk.Label(details_frame, text="C√≥digo:").grid(row=row, column=0, sticky="w", pady=2)
        self.entry_codigo = ttk.Entry(details_frame, textvariable=self.var_codigo, 
                                     state="readonly", width=30)
        self.entry_codigo.grid(row=row, column=1, sticky="w", padx=5, pady=2)
        row += 1
        
        # Nome
        ttk.Label(details_frame, text="Nome:").grid(row=row, column=0, sticky="w", pady=2)
        self.entry_nome = ttk.Entry(details_frame, textvariable=self.var_nome, 
                                   state="readonly", width=30)
        self.entry_nome.grid(row=row, column=1, sticky="w", padx=5, pady=2)
        row += 1
        
        # Frame de bot√µes
        buttons_frame = ttk.Frame(details_frame)
        buttons_frame.grid(row=row, column=0, columnspan=2, pady=20, sticky="ew")
        
        # Bot√µes de a√ß√£o
        self.btn_edit = ttk.Button(buttons_frame, text="‚úèÔ∏è Editar", 
                                  command=self._toggle_edit_mode)
        self.btn_edit.pack(side="left", padx=(0, 5))
        
        self.btn_save = ttk.Button(buttons_frame, text="üíæ Salvar", 
                                  command=self._save_clinica, state="disabled")
        self.btn_save.pack(side="left", padx=(0, 5))
        
        self.btn_cancel = ttk.Button(buttons_frame, text="‚ùå Cancelar", 
                                    command=self._cancel_edit, state="disabled")
        self.btn_cancel.pack(side="left", padx=(0, 5))
        
        self.btn_delete = ttk.Button(buttons_frame, text="üóëÔ∏è Excluir", 
                                    command=self._delete_clinica)
        self.btn_delete.pack(side="left", padx=(0, 5))
    
    def run_async(self, coro):
        """Executa corrotina de forma s√≠ncrona"""
        try:
            loop = asyncio.get_event_loop()
            if loop.is_running():
                # Se j√° h√° um loop rodando, criar uma nova task
                task = loop.create_task(coro)
                return task
            else:
                return loop.run_until_complete(coro)
        except RuntimeError:
            # Se n√£o h√° loop, criar um novo
            return asyncio.run(coro)
    
    async def _load_clinicas(self):
        """Carrega lista de cl√≠nicas do banco"""
        try:
            async with AsyncSessionLocal() as session:
                stmt = select(Clinica).order_by(Clinica.nome)
                result = await session.execute(stmt)
                clinicas = result.scalars().all()
                
                self.clinicas_data = [
                    {
                        "id": c.id,
                        "codigo": c.codigo,
                        "nome": c.nome
                    }
                    for c in clinicas
                ]
                
                self._update_tree()
                
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao carregar cl√≠nicas: {str(e)}")
    
    def _update_tree(self):
        """Atualiza a √°rvore com dados das cl√≠nicas"""
        # Limpar √°rvore
        for item in self.tree.get_children():
            self.tree.delete(item)
        
        # Adicionar cl√≠nicas
        for clinica in self.clinicas_data:
            self.tree.insert("", "end", values=(
                clinica["id"],
                clinica["codigo"],
                clinica["nome"]
            ))
    
    def _on_select_clinica(self, event):
        """Evento de sele√ß√£o de cl√≠nica na lista"""
        selection = self.tree.selection()
        if not selection:
            self._clear_details()
            return
        
        item = self.tree.item(selection[0])
        values = item["values"]
        
        if values:
            self.selected_clinica_id = int(values[0])
            self._load_clinica_details(self.selected_clinica_id)
    
    def _load_clinica_details(self, clinica_id: int):
        """Carrega detalhes de uma cl√≠nica espec√≠fica"""
        clinica_data = next((c for c in self.clinicas_data if c["id"] == clinica_id), None)
        
        if clinica_data:
            self.var_id.set(str(clinica_data["id"]))
            self.var_codigo.set(clinica_data["codigo"])
            self.var_nome.set(clinica_data["nome"])
            
            # Habilitar bot√µes
            self.btn_edit.config(state="normal")
            self.btn_delete.config(state="normal")
    
    def _clear_details(self):
        """Limpa os campos de detalhes"""
        self.var_id.set("")
        self.var_codigo.set("")
        self.var_nome.set("")
        self.selected_clinica_id = None
        
        # Desabilitar bot√µes
        self.btn_edit.config(state="disabled")
        self.btn_delete.config(state="disabled")
    
    def _toggle_edit_mode(self):
        """Alterna modo de edi√ß√£o"""
        self.edit_mode = True
        
        # Habilitar campos
        self.entry_codigo.config(state="normal")
        self.entry_nome.config(state="normal")
        
        # Alterar bot√µes
        self.btn_edit.config(state="disabled")
        self.btn_save.config(state="normal")
        self.btn_cancel.config(state="normal")
        self.btn_delete.config(state="disabled")
    
    def _cancel_edit(self):
        """Cancela edi√ß√£o"""
        self.edit_mode = False
        
        # Recarregar dados originais
        if self.selected_clinica_id:
            self._load_clinica_details(self.selected_clinica_id)
        
        # Desabilitar campos
        self.entry_codigo.config(state="readonly")
        self.entry_nome.config(state="readonly")
        
        # Alterar bot√µes
        self.btn_edit.config(state="normal")
        self.btn_save.config(state="disabled")
        self.btn_cancel.config(state="disabled")
        self.btn_delete.config(state="normal")
    
    def _save_clinica(self):
        """Salva altera√ß√µes da cl√≠nica"""
        try:
            codigo = self.var_codigo.get().strip()
            nome = self.var_nome.get().strip()
            
            if not codigo or not nome:
                messagebox.showwarning("Aten√ß√£o", "C√≥digo e nome s√£o obrigat√≥rios")
                return
            
            if self.selected_clinica_id:
                # Atualizar cl√≠nica existente
                self.run_async(self._update_clinica(self.selected_clinica_id, codigo, nome))
            else:
                # Nova cl√≠nica
                self.run_async(self._create_clinica(codigo, nome))
            
            self._cancel_edit()
            self.run_async(self._load_clinicas())
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao salvar cl√≠nica: {str(e)}")
    
    async def _create_clinica(self, codigo: str, nome: str):
        """Cria nova cl√≠nica"""
        async with AsyncSessionLocal() as session:
            try:
                clinica = Clinica(codigo=codigo, nome=nome)
                session.add(clinica)
                await session.commit()
                messagebox.showinfo("Sucesso", "Cl√≠nica criada com sucesso!")
            except IntegrityError:
                await session.rollback()
                raise ValueError("C√≥digo da cl√≠nica j√° existe")
    
    async def _update_clinica(self, clinica_id: int, codigo: str, nome: str):
        """Atualiza cl√≠nica existente"""
        async with AsyncSessionLocal() as session:
            try:
                stmt = (
                    update(Clinica)
                    .where(Clinica.id == clinica_id)
                    .values(codigo=codigo, nome=nome)
                )
                result = await session.execute(stmt)
                await session.commit()
                
                if result.rowcount == 0:
                    raise ValueError("Cl√≠nica n√£o encontrada")
                
                messagebox.showinfo("Sucesso", "Cl√≠nica atualizada com sucesso!")
            except IntegrityError:
                await session.rollback()
                raise ValueError("C√≥digo da cl√≠nica j√° existe")
    
    def _delete_clinica(self):
        """Exclui cl√≠nica selecionada"""
        if not self.selected_clinica_id:
            return
        
        clinica_nome = self.var_nome.get()
        
        if messagebox.askyesno("Confirmar", 
                              f"Tem certeza que deseja excluir a cl√≠nica '{clinica_nome}'?\n\n"
                              "ATEN√á√ÉO: Esta a√ß√£o n√£o pode ser desfeita e pode afetar "
                              "usu√°rios vinculados a esta cl√≠nica."):
            try:
                self.run_async(self._remove_clinica(self.selected_clinica_id))
                self._clear_details()
                self.run_async(self._load_clinicas())
            except Exception as e:
                messagebox.showerror("Erro", f"Erro ao excluir cl√≠nica: {str(e)}")
    
    async def _remove_clinica(self, clinica_id: int):
        """Remove cl√≠nica do banco"""
        async with AsyncSessionLocal() as session:
            try:
                stmt = delete(Clinica).where(Clinica.id == clinica_id)
                result = await session.execute(stmt)
                await session.commit()
                
                if result.rowcount == 0:
                    raise ValueError("Cl√≠nica n√£o encontrada")
                
                messagebox.showinfo("Sucesso", "Cl√≠nica exclu√≠da com sucesso!")
            except IntegrityError:
                await session.rollback()
                raise ValueError("N√£o √© poss√≠vel excluir: existem usu√°rios vinculados a esta cl√≠nica")
    
    def _new_clinica(self):
        """Prepara interface para nova cl√≠nica"""
        self._clear_details()
        self.selected_clinica_id = None
        self._toggle_edit_mode()
        self.entry_codigo.focus()
    
    def _refresh_list(self):
        """Atualiza lista de cl√≠nicas"""
        self.run_async(self._load_clinicas())


def show_clinicas_manager(master: tk.Tk):
    """Fun√ß√£o para mostrar o gerenciador de cl√≠nicas"""
    app = ClinicasApp(master)
    return app


if __name__ == "__main__":
    # Teste standalone
    root = tk.Tk()
    root.withdraw()  # Esconder janela principal
    app = ClinicasApp(root)
    app.mainloop()